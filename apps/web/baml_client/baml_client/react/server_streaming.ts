/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  AllowedTypes,  AssisantMessage,  BamlChatThread,  ConstructionProjectData,  EstimateLineItem,  Event,  InputFile,  KeyFrame,  Patch,  PatchEstimateRequest,  PatchEstimateResponse,  PatchOperation,  PatchResult,  UpdateEstimateRequest,  UpdateEstimateResponse,  UserInput,  VideoAnalysis } from "../types"

import type * as types from "../types"

/**
 * Streaming BAML server actions that return ReadableStreams.
 */

/**
 * Executes the streaming variant of the "AnalyzeVideo" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { string } video_name - Input parameter.
 * @param { string } video_description - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const AnalyzeVideo = async (
  video_name: string,
  video_description: string,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.AnalyzeVideo(
    video_name,
    video_description,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "DetermineNextStep" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { BamlChatThread } thread - Input parameter.
 * @param { ConstructionProjectData | null } current_estimate (optional) - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const DetermineNextStep = async (
  thread: BamlChatThread,
  current_estimate?: ConstructionProjectData | null,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.DetermineNextStep(
    thread,
    current_estimate,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "GenerateProjectEstimate" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { InputFile[] } files - Input parameter.
 * @param { ConstructionProjectData | null } existing_estimate (optional) - Input parameter.
 * @param { string | null } requested_changes (optional) - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const GenerateProjectEstimate = async (
  files: InputFile[],
  existing_estimate?: ConstructionProjectData | null,
  requested_changes?: string | null,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.GenerateProjectEstimate(
    files,
    existing_estimate,
    requested_changes,
  );
  return Promise.resolve(stream.toStreamable());
};

/**
 * Executes the streaming variant of the "ProcessAudio" BAML action.
 *
 * This action initiates a streaming response by calling the corresponding
 * BAML stream function. The returned stream yields incremental updates.
 *
 * @param { InputFile } audio - Input parameter.
 *
 * @returns {ReadableStream<Uint8Array>} A stream that yields incremental updates from the action.
 */
export const ProcessAudio = async (
  audio: InputFile,
): Promise<ReadableStream<Uint8Array>> => {
  const stream = b.stream.ProcessAudio(
    audio,
  );
  return Promise.resolve(stream.toStreamable());
};