/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
'use server'

import { b } from '../index';
import type { Check, Checked  } from "../types";
import type { Image, Audio } from "@boundaryml/baml";

import type {  AllowedTypes,  AssisantMessage,  BamlChatThread,  ConstructionProjectData,  EstimateLineItem,  Event,  InputFile,  KeyFrame,  UpdateEstimateRequest,  UpdateEstimateResponse,  UserInput,  VideoAnalysis } from "../types"

import type * as types from "../types"

/**
 * Regular BAML server actions that return direct responses.
 */

/**
 * Executes the "AnalyzeVideo" BAML action.
 *
 * This server action calls the underlying BAML function "AnalyzeVideo"
 * with the specified parameters.
 *
 * @param { string } video_reference - Input parameter.
 *
 * @returns {Promise<VideoAnalysis>} A promise that resolves with the result of the action.
 */
export const AnalyzeVideo = async (
  video_reference: string,
): Promise<VideoAnalysis> => {
  return b.AnalyzeVideo(
    video_reference,
  );
};

/**
 * Executes the "DetermineNextStep" BAML action.
 *
 * This server action calls the underlying BAML function "DetermineNextStep"
 * with the specified parameters.
 *
 * @param { BamlChatThread } thread - Input parameter.
 * @param { ConstructionProjectData } current_estimate - Input parameter.
 *
 * @returns {Promise<Event>} A promise that resolves with the result of the action.
 */
export const DetermineNextStep = async (
  thread: BamlChatThread,
  current_estimate: ConstructionProjectData,
): Promise<Event> => {
  return b.DetermineNextStep(
    thread,
    current_estimate,
  );
};

/**
 * Executes the "GenerateProjectEstimate" BAML action.
 *
 * This server action calls the underlying BAML function "GenerateProjectEstimate"
 * with the specified parameters.
 *
 * @param { InputFile[] } files - Input parameter.
 * @param { ConstructionProjectData | null } existing_estimate (optional) - Input parameter.
 * @param { string | null } requested_changes (optional) - Input parameter.
 *
 * @returns {Promise<ConstructionProjectData>} A promise that resolves with the result of the action.
 */
export const GenerateProjectEstimate = async (
  files: InputFile[],
  existing_estimate?: ConstructionProjectData | null,
  requested_changes?: string | null,
): Promise<ConstructionProjectData> => {
  return b.GenerateProjectEstimate(
    files,
    existing_estimate,
    requested_changes,
  );
};

/**
 * Executes the "ProcessAudio" BAML action.
 *
 * This server action calls the underlying BAML function "ProcessAudio"
 * with the specified parameters.
 *
 * @param { InputFile } audio - Input parameter.
 *
 * @returns {Promise<string>} A promise that resolves with the result of the action.
 */
export const ProcessAudio = async (
  audio: InputFile,
): Promise<string> => {
  return b.ProcessAudio(
    audio,
  );
};