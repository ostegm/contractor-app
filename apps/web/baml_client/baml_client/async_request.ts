/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio } from "@boundaryml/baml"
import { toBamlError, HTTPRequest } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type * as types from "./types"
import type {AllowedTypes, AssisantMessage, BamlChatThread, ConstructionProjectData, EstimateLineItem, Event, InputFile, KeyFrame, Patch, PatchEstimateRequest, PatchEstimateResponse, PatchOperation, PatchResult, ResponseEvent, UpdateEstimateRequest, UpdateEstimateResponse, UserInput, VideoAnalysis} from "./types"
import type TypeBuilder from "./type_builder"

type BamlCallOptions = {
  tb?: TypeBuilder
  clientRegistry?: ClientRegistry
}

export class AsyncHttpRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AnalyzeVideo(
      video_name: string,video_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "AnalyzeVideo",
        {
          "video_name": video_name,"video_description": video_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetermineNextStep(
      thread: BamlChatThread,current_estimate?: ConstructionProjectData | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "DetermineNextStep",
        {
          "thread": thread,"current_estimate": current_estimate?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateProjectEstimate(
      files: InputFile[],existing_estimate?: ConstructionProjectData | null,requested_changes?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "GenerateProjectEstimate",
        {
          "files": files,"existing_estimate": existing_estimate?? null,"requested_changes": requested_changes?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ParseLineItem(
      
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "ParseLineItem",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ProcessAudio(
      audio: InputFile,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "ProcessAudio",
        {
          "audio": audio
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        false,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class AsyncHttpStreamRequest {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  async AnalyzeVideo(
      video_name: string,video_description: string,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "AnalyzeVideo",
        {
          "video_name": video_name,"video_description": video_description
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async DetermineNextStep(
      thread: BamlChatThread,current_estimate?: ConstructionProjectData | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "DetermineNextStep",
        {
          "thread": thread,"current_estimate": current_estimate?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async GenerateProjectEstimate(
      files: InputFile[],existing_estimate?: ConstructionProjectData | null,requested_changes?: string | null,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "GenerateProjectEstimate",
        {
          "files": files,"existing_estimate": existing_estimate?? null,"requested_changes": requested_changes?? null
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ParseLineItem(
      
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "ParseLineItem",
        {
          
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  async ProcessAudio(
      audio: InputFile,
      __baml_options__?: BamlCallOptions
  ): Promise<HTTPRequest> {
    try {
      return await this.runtime.buildRequest(
        "ProcessAudio",
        {
          "audio": audio
        },
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
        true,
      )
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}