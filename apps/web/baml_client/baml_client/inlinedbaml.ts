/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
const fileMap = {
  
  "clients.baml": "// https://docs.boundaryml.com/docs/snippets/clients/fallback\nclient<llm> OpenaiFallback {\n  provider fallback\n  options {\n    // This will try the clients in order until one succeeds\n    strategy [GPT41With2Retries, GPT41MiniWith2Retries]\n  }\n}\n\n// Learn more about clients at https://docs.boundaryml.com/docs/snippets/clients/overview\nclient<llm> LocalQwen3 {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:1234/v1\"\n    model \"qwen3-8b-mlx\"\n  }\n}\n\n\nclient<llm> O4Mini {\n  provider openai\n  options {\n    model \"o4-mini-2025-04-16\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT41With2Retries {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4.1\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nclient<llm> GPT41MiniWith2Retries {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4.1-mini\"\n    api_key env.OPENAI_API_KEY\n  }\n}\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}",
  "contractor.baml": "// Sample BAML schema for Contractor project\n\n// Define the types used in the application\nclass ContractorEstimate {\n    project_name string\n    description string \n    total_cost float\n    line_items LineItem[]\n    estimated_hours float\n    timeline TimelineInfo\n}\n\nclass LineItem {\n    description string\n    cost float\n    quantity int\n}\n\nclass TimelineInfo {\n    start_date string\n    end_date string\n    milestones Milestone[]\n}\n\nclass Milestone {\n    name string\n    date string\n    completion_percentage float\n}\n\n// Define a simple function to generate project estimates\nfunction GenerateEstimate(\n    project_name: string,\n    description: string,\n    requirements: string[]\n) -> ContractorEstimate {\n    client OpenaiFallback\n    prompt #\"\n    You are an expert construction estimator. Based on the project information provided,\n    generate a detailed estimate including costs, timeline, and milestones.\n\n    Project Name: {{ project_name }}\n    Description: {{ description }}\n    Requirements:\n    {% for requirement in requirements %}\n    - {{ requirement }}\n    {% endfor %}\n\n    Provide a detailed estimate with the following:\n    1. Line items for materials and labor\n    2. Total cost\n    3. Timeline with start and end dates\n    4. Key milestones with completion percentages\n\n    Format your response according to the specified output format.\n    {{ ctx.output_format }}\n    \"#\n}\n\n// Example test case for the function\ntest generate_basic_estimate {\n    functions [GenerateEstimate]\n    args {\n        project_name \"Bathroom Renovation\"\n        description \"Complete renovation of a 100 sq ft bathroom\"\n        requirements [\n            \"Replace bathtub with walk-in shower\",\n            \"Install new vanity and toilet\",\n            \"Replace flooring with ceramic tile\",\n            \"Update lighting fixtures\"\n        ]\n    }\n}",
  "generators.baml": "generator ts_client {\n  output_type        \"typescript/react\"\n  output_dir         \"../apps/web/baml_client\"\n  version            \"0.86.1\"\n  default_client_mode async\n}\n\ngenerator py_client {\n  output_type        \"python/pydantic\"\n  output_dir         \"../apps/langgraph/src/file_processor\"\n  version            \"0.86.1\"\n  default_client_mode sync\n}",
}
export const getBamlFiles = () => {
    return fileMap;
}