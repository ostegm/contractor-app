/*************************************************************************************************

Welcome to Baml! To use this generated code, please run one of the following:

$ npm install @boundaryml/baml
$ yarn add @boundaryml/baml
$ pnpm add @boundaryml/baml

*************************************************************************************************/

// This file was generated by BAML: do not edit it. Instead, edit the BAML
// files and re-generate this code.
//
/* eslint-disable */
// tslint:disable
// @ts-nocheck
// biome-ignore format: autogenerated code
import type { BamlRuntime, BamlCtxManager, ClientRegistry, Image, Audio, Collector } from "@boundaryml/baml"
import { toBamlError } from "@boundaryml/baml"
import type { Checked, Check } from "./types"
import type { partial_types } from "./partial_types"
import type * as types from "./types"
import type {AllowedTypes, AssisantMessage, BamlChatThread, ConstructionProjectData, EstimateLineItem, Event, InputFile, KeyFrame, Patch, PatchEstimateRequest, PatchEstimateResponse, PatchOperation, PatchResult, UpdateEstimateRequest, UpdateEstimateResponse, UserInput, VideoAnalysis} from "./types"
import type TypeBuilder from "./type_builder"

export class LlmResponseParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeVideo(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): VideoAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeVideo",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as VideoAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetermineNextStep(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): Event {
    try {
      return this.runtime.parseLlmResponse(
        "DetermineNextStep",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as Event
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateProjectEstimate(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): ConstructionProjectData {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateProjectEstimate",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as ConstructionProjectData
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ParseLineItem(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): EstimateLineItem {
    try {
      return this.runtime.parseLlmResponse(
        "ParseLineItem",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as EstimateLineItem
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ProcessAudio(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "ProcessAudio",
        llmResponse,
        false,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}

export class LlmStreamParser {
  constructor(private runtime: BamlRuntime, private ctxManager: BamlCtxManager) {}

  
  AnalyzeVideo(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.VideoAnalysis {
    try {
      return this.runtime.parseLlmResponse(
        "AnalyzeVideo",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.VideoAnalysis
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  DetermineNextStep(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.Event {
    try {
      return this.runtime.parseLlmResponse(
        "DetermineNextStep",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.Event
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  GenerateProjectEstimate(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.ConstructionProjectData {
    try {
      return this.runtime.parseLlmResponse(
        "GenerateProjectEstimate",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.ConstructionProjectData
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ParseLineItem(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): partial_types.EstimateLineItem {
    try {
      return this.runtime.parseLlmResponse(
        "ParseLineItem",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as partial_types.EstimateLineItem
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
  ProcessAudio(
      llmResponse: string,
      __baml_options__?: { tb?: TypeBuilder, clientRegistry?: ClientRegistry }
  ): string {
    try {
      return this.runtime.parseLlmResponse(
        "ProcessAudio",
        llmResponse,
        true,
        this.ctxManager.cloneContext(),
        __baml_options__?.tb?.__tb(),
        __baml_options__?.clientRegistry,
      ) as string
    } catch (error) {
      throw toBamlError(error);
    }
  }
  
}