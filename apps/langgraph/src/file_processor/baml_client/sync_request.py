###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type, Literal
from typing_extensions import NotRequired

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeVideo(
        self,
        video_name: str,video_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeVideo",
        {
          "video_name": video_name,"video_description": video_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def DetermineNextStep(
        self,
        thread: types.BamlChatThread,current_estimate: Optional[types.ConstructionProjectData],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "DetermineNextStep",
        {
          "thread": thread,"current_estimate": current_estimate,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GenerateProjectEstimate(
        self,
        files: List[types.InputFile],existing_estimate: Optional[types.ConstructionProjectData],requested_changes: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateProjectEstimate",
        {
          "files": files,"existing_estimate": existing_estimate,"requested_changes": requested_changes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ParseLineItem(
        self,
        
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ParseLineItem",
        {
          
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ProcessAudio(
        self,
        audio: types.InputFile,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProcessAudio",
        {
          "audio": audio,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def AnalyzeVideo(
        self,
        video_name: str,video_description: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "AnalyzeVideo",
        {
          "video_name": video_name,"video_description": video_description,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def DetermineNextStep(
        self,
        thread: types.BamlChatThread,current_estimate: Optional[types.ConstructionProjectData],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "DetermineNextStep",
        {
          "thread": thread,"current_estimate": current_estimate,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GenerateProjectEstimate(
        self,
        files: List[types.InputFile],existing_estimate: Optional[types.ConstructionProjectData],requested_changes: Optional[str],
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GenerateProjectEstimate",
        {
          "files": files,"existing_estimate": existing_estimate,"requested_changes": requested_changes,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ParseLineItem(
        self,
        
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ParseLineItem",
        {
          
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ProcessAudio(
        self,
        audio: types.InputFile,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ProcessAudio",
        {
          "audio": audio,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]