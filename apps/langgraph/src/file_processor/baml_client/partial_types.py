###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class ContractorEstimate(BaseModel):
    project_name: Optional[str] = None
    description: Optional[str] = None
    total_cost: Optional[float] = None
    line_items: List["LineItem"]
    estimated_hours: Optional[float] = None
    timeline: Optional["TimelineInfo"] = None

class LineItem(BaseModel):
    description: Optional[str] = None
    cost: Optional[float] = None
    quantity: Optional[int] = None

class Milestone(BaseModel):
    name: Optional[str] = None
    date: Optional[str] = None
    completion_percentage: Optional[float] = None

class TimelineInfo(BaseModel):
    start_date: Optional[str] = None
    end_date: Optional[str] = None
    milestones: List["Milestone"]
