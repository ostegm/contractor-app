###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Optional, TypeVar, Union, Literal

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class AssisantMessage(BaseModel):
    message: Optional[str] = None

class BamlChatThread(BaseModel):
    events: List["Event"]

class ConstructionProjectData(BaseModel):
    project_description: Optional[str] = None
    estimated_total_min: Optional[float] = None
    estimated_total_max: Optional[float] = None
    estimated_timeline_days: Optional[int] = None
    key_considerations: List[str]
    confidence_level: Optional[str] = None
    estimate_items: List["EstimateLineItem"]
    next_steps: List[str]
    missing_information: List[str]
    key_risks: List[str]

class EstimateLineItem(BaseModel):
    description: Optional[str] = None
    category: Optional[str] = None
    subcategory: Optional[str] = None
    cost_range_min: Optional[float] = None
    cost_range_max: Optional[float] = None
    unit: Optional[str] = None
    quantity: Optional[float] = None
    assumptions: Optional[str] = None
    confidence_score: Optional[str] = None
    notes: Optional[str] = None

class Event(BaseModel):
    type: Optional[types.AllowedTypes] = None
    data: Optional[Union["UserInput", "AssisantMessage", "UpdateEstimateRequest", "UpdateEstimateResponse"]] = None

class InputFile(BaseModel):
    name: Optional[str] = None
    type: Optional[str] = None
    description: Optional[str] = None
    content: Optional[str] = None
    download_url: Optional[str] = None
    image_data: Optional[baml_py.Image] = None
    audio_data: Optional[baml_py.Audio] = None

class ProcessedVideo(BaseModel):
    summary: Optional[str] = None
    frames: List["VideoFrame"]

class UpdateEstimateRequest(BaseModel):
    changes_to_make: Optional[str] = None

class UpdateEstimateResponse(BaseModel):
    success: Optional[bool] = None
    error_message: Optional[str] = None

class UserInput(BaseModel):
    message: Optional[str] = None

class VideoFrame(BaseModel):
    timestamp: Optional[float] = None
    description: Optional[str] = None
