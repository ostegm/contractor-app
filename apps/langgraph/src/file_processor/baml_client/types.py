###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class AllowedTypes(str, Enum):
    
    UserInput = "UserInput"
    AssisantMessage = "AssisantMessage"
    UpdateEstimateRequest = "UpdateEstimateRequest"
    UpdateEstimateResponse = "UpdateEstimateResponse"
    PatchEstimateRequest = "PatchEstimateRequest"
    PatchEstimateResponse = "PatchEstimateResponse"

class PatchOperation(str, Enum):
    
    Add = "Add"
    Remove = "Remove"
    Replace = "Replace"

class AssisantMessage(BaseModel):
    message: str

class BamlChatThread(BaseModel):
    events: List["Event"]

class ConstructionProjectData(BaseModel):
    project_description: str
    estimated_total_min: Optional[float] = None
    estimated_total_max: Optional[float] = None
    estimated_timeline_days: Optional[int] = None
    key_considerations: List[str]
    confidence_level: str
    estimate_items: List["EstimateLineItem"]
    next_steps: List[str]
    missing_information: List[str]
    key_risks: List[str]

class EstimateLineItem(BaseModel):
    uid: str
    description: str
    category: str
    subcategory: Optional[str] = None
    cost_range_min: float
    cost_range_max: float
    unit: Optional[str] = None
    quantity: Optional[float] = None
    assumptions: Optional[str] = None
    confidence_score: Optional[str] = None
    notes: Optional[str] = None

class Event(BaseModel):
    type: "AllowedTypes"
    data: Union["UserInput", "AssisantMessage", "UpdateEstimateRequest", "UpdateEstimateResponse", "PatchEstimateRequest", "PatchEstimateResponse"]

class InputFile(BaseModel):
    name: str
    type: str
    description: Optional[str] = None
    content: Optional[str] = None
    download_url: Optional[str] = None
    image_data: Optional[baml_py.Image] = None
    audio_data: Optional[baml_py.Audio] = None

class KeyFrame(BaseModel):
    filename: str
    timestamp_s: float
    description: str

class Patch(BaseModel):
    json_path: str
    operation: "PatchOperation"
    new_value: Union[Optional[str], "EstimateLineItem"] = None

class PatchEstimateRequest(BaseModel):
    patches: List["Patch"]

class PatchEstimateResponse(BaseModel):
    patch_results: List["PatchResult"]

class PatchResult(BaseModel):
    success: bool
    error_message: Optional[str] = None

class UpdateEstimateRequest(BaseModel):
    changes_to_make: str

class UpdateEstimateResponse(BaseModel):
    success: bool
    error_message: str

class UserInput(BaseModel):
    message: str

class VideoAnalysis(BaseModel):
    detailed_description: str
    key_frames: List["KeyFrame"]
