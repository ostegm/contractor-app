###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum
from pydantic import BaseModel, ConfigDict
from typing_extensions import TypeAlias
from typing import Dict, Generic, List, Literal, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str

class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class ConstructionProjectData(BaseModel):
    project_description: str
    estimated_total_min: Optional[float] = None
    estimated_total_max: Optional[float] = None
    estimated_timeline_days: Optional[int] = None
    key_considerations: List[str]
    confidence_level: str
    estimate_items: List["EstimateLineItem"]
    next_steps: List[str]
    missing_information: List[str]
    key_risks: List[str]

class ContractorEstimate(BaseModel):
    project_name: str
    description: str
    total_cost: float
    line_items: List["LineItem"]
    estimated_hours: float
    timeline: "TimelineInfo"

class EstimateLineItem(BaseModel):
    description: str
    category: str
    subcategory: Optional[str] = None
    cost_range_min: float
    cost_range_max: float
    unit: Optional[str] = None
    quantity: Optional[float] = None
    assumptions: Optional[str] = None
    confidence_score: Optional[str] = None
    notes: Optional[str] = None

class InputFile(BaseModel):
    name: str
    type: str
    description: Optional[str] = None
    content: Optional[str] = None
    download_url: Optional[str] = None
    image_data: Optional[baml_py.Image] = None

class LineItem(BaseModel):
    description: str
    cost: float
    quantity: int

class Milestone(BaseModel):
    name: str
    date: str
    completion_percentage: float

class TimelineInfo(BaseModel):
    start_date: str
    end_date: str
    milestones: List["Milestone"]
